services:
  es:
    build:
      context: elasticsearch
      args:
        VERSION: 8.13.4
    container_name: es
    environment:
      - node.name=single-node
      - cluster.name=backtony
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    ports:
      - 9200:9200
      - 9300:9300
    networks:
      - es-bridge
    ulimits:
      memlock:
        soft: -1
        hard: -1

  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:8.13.4
    environment:
      - SERVER_NAME=kibana
      - ELASTICSEARCH_HOSTS=http://es:9200
      - ELASTICSEARCH_USERNAME=${ELASTIC_KIBANA_USERNAME}
      - ELASTICSEARCH_PASSWORD=${ELASTIC_KIBANA_PASSWORD}
      - SERVER_BASEPATH=/kibana
      - SERVER_REWRITEBASEPATH=true
    ports:
      - 5601:5601
    depends_on:
      - es
    networks:
      - es-bridge

  logstash:
    image: docker.elastic.co/logstash/logstash:8.13.4
    container_name: logstash
    environment:
      - ELASTICSEARCH_HOSTS=http://es:9200
      - ELASTICSEARCH_USERNAME=${ELASTIC_USERNAME}
      - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    volumes:
      - ./logstash/config/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml
      - ./logstash/mysql-connector-j-8.3.0.jar:/usr/share/logstash/mysql-connector-j-8.3.0.jar
    depends_on:
      - es
      - mysql
    networks:
      - es-bridge

  mysql:
    image: mysql:8.0
    container_name: mysql
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    ports:
      - 3306:3306
    networks:
      - es-bridge
    volumes:
      - mysql-data:/var/lib/mysql
      - /home/ubuntu/export:/data

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - 6379:6379
    networks:
      - es-bridge

  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: backend
    ports:
     - 8080:8080
    env_file: .env
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - mysql
      - redis
    networks:
      - es-bridge

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - /etc/letsencrypt:/etc/letsencrypt:ro  # EC2의 인증서 폴더 공유
      - ../../frontend/dist:/usr/share/nginx/html:ro  # Vite 결과물
    depends_on:
      - kibana
      - es
      - backend
    networks:
      - es-bridge

#  frontend:
#    build:
#      context: ../../frontend
#      dockerfile: Dockerfile
#    container_name: frontend
#    ports:
#      - 80:80
#    networks:
#      - es-bridge

networks:
  es-bridge:
    driver: bridge

volumes:
  mysql-data:
